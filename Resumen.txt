Resumen Tema 1 Fundamentos de Ing de SW

1. ¿Qué es software?
Sommerville define el software como programas y la documentación asociada. Incluye sistemas operativos, aplicaciones, y el conjunto de datos procesados por las aplicaciones.

2. ¿Qué es la ingeniería del software?
Es una disciplina que aplica principios de ingeniería para desarrollar software de alta calidad de manera sistemática, eficiente y efectiva. Se enfoca en la mejora continua de la práctica del desarrollo de software.

3. Diferencia entre ingeniería del software y ciencia de la computación:
La ciencia de la computación estudia los fundamentos y teorías subyacentes de los sistemas de información, mientras que la ingeniería del software se centra en la producción de software útil y práctico que cumpla con las necesidades de los usuarios.

4. Diferencia entre ingeniería del software e ingeniería de sistemas:
La ingeniería de sistemas involucra el desarrollo y gestión de sistemas complejos, de los cuales el software es solo un componente. La ingeniería del software está especializada en el ciclo de vida del software, desde su diseño hasta su mantenimiento.

5. ¿Qué es un proceso del software?
El proceso del software es un conjunto estructurado de actividades necesarias para desarrollar un sistema software. Incluye actividades como la especificación, diseño, implementación, prueba y mantenimiento.

6. ¿Qué es un modelo de proceso del software?
Un modelo de proceso es una simplificación de un proceso real de desarrollo de software. Algunos de los modelos descritos por Sommerville son el modelo en cascada, el desarrollo iterativo y el modelo ágil, que permiten organizar las fases de desarrollo del software.

7. Costos de la ingeniería del software:
Sommerville menciona que los costos están principalmente asociados con los recursos humanos (el personal) y las herramientas de soporte. La mayor parte de los costos se concentra en el mantenimiento y evolución del software, más que en su desarrollo inicial.

8. Métodos de la ingeniería del software:
Los métodos son enfoques estructurados que describen cómo se deben llevar a cabo las diferentes actividades dentro de un proceso del software. Estos incluyen metodologías ágiles, la ingeniería de requisitos, diseño de software, entre otros.

9. ¿Qué es CASE?
Las herramientas CASE (Computer-Aided Software Engineering) son herramientas que soportan el desarrollo de software mediante la automatización de diferentes actividades, como el modelado, la codificación y la gestión de la configuración.

10. Atributos de un buen software:
Sommerville identifica atributos esenciales como:
Mantenibilidad: Capacidad del software para adaptarse a cambios.
Confiabilidad: Grado en el que el software puede operar sin fallos.
Eficiencia: Uso adecuado de los recursos del sistema.
Usabilidad: Facilidad con la que los usuarios pueden aprender y usar el software.

11. Retos fundamentales en la ingeniería del software:
Sommerville resalta varios retos como:
La heterogeneidad: Desarrollar software que pueda operar en diferentes plataformas.
Entrega de software rápido: La demanda de ciclos de desarrollo más cortos.
Confiabilidad: Asegurar que el software funcione correctamente en todas las situaciones.

Estructura general para la ingeniería de software
Este tema abarca los diferentes enfoques para estructurar el desarrollo de software, representados por los flujos de proceso. Los modelos de proceso organizan las actividades y tareas del desarrollo de software y pueden seguir varios flujos:

Flujo de proceso lineal:
Es el modelo en cascada, donde cada fase (requisitos, diseño, implementación, pruebas, mantenimiento) sigue un orden secuencial.
No permite retrocesos, por lo que se avanza de una fase a otra solo cuando la anterior ha sido completada.
Adecuado para proyectos con requisitos bien definidos desde el principio.

Flujo de proceso iterativo:
En este modelo, se repiten ciertas fases o partes del desarrollo de manera cíclica.
Permite refinar los requisitos y el diseño en cada ciclo, adaptándose mejor a cambios y mejoras continuas.
Ejemplo: El Modelo en espiral.

Flujo de proceso evolutivo:
Se enfoca en crear versiones iniciales del software, que se van mejorando y evolucionando con el tiempo.
Las versiones iniciales son entregables funcionales, aunque incompletos, que se van enriqueciendo con nuevas características.
Este modelo permite retroalimentación temprana del usuario y es útil para sistemas que requieren adaptación constante.

Flujo de proceso paralelo:
Implica el desarrollo de diferentes componentes o módulos del software simultáneamente en varias fases.
Favorece la división del trabajo en equipos y la integración continua de los diferentes componentes del sistema.

Comparación de modelos de proceso según Pressman
Pressman clasifica los modelos de proceso de software en diferentes categorías, dependiendo del enfoque del proyecto:
Modelos secuenciales (como el modelo en cascada).
Modelos incrementales (entregan el software por etapas, permitiendo retroalimentación y ajustes).
Modelos evolutivos (como el modelo en espiral y el desarrollo evolutivo, que se adapta con el tiempo).
Modelos concurrentes o paralelos (donde múltiples actividades ocurren simultáneamente).

Comparación de modelos (Pressman / Sommerville)
Pressman y Sommerville ofrecen diferentes perspectivas sobre los modelos de proceso:
Pressman se enfoca más en la clasificación por tipo de flujo (lineal, iterativo, evolutivo).
Sommerville destaca las características clave de los modelos en relación con la complejidad del software y la gestión del riesgo. También incluye enfoques ágiles y ajustados a requisitos cambiantes.
Ambos autores coinciden en que la elección del modelo depende del tipo de proyecto, el entorno y los requisitos.

Herramientas CASE

1. Definición:
Las herramientas CASE son un conjunto de herramientas que facilitan la automatización de tareas a lo largo del ciclo de vida del software, desde su desarrollo hasta la gestión de proyectos. Ayudan en la implementación de software de manera más eficiente.

2. Funcionalidades:
Modelado: Facilitan la creación de diagramas y modelos que representan el sistema de software.
Generación de código: Algunas herramientas CASE permiten generar código automáticamente a partir de modelos o diagramas.
Gestión de proyectos: Incluyen funcionalidades para planificar, rastrear y gestionar el desarrollo del software.
Diagramas de flujo: Creación de diagramas que ayudan a visualizar el flujo de procesos dentro del software.
Plantillas de código: Ofrecen plantillas predefinidas para acelerar el desarrollo de software.
Gestión de requisitos: Ayudan en la captura, análisis y seguimiento de los requisitos del proyecto.

3. Clasificación:
Upper CASE: Herramientas que se usan en las fases iniciales del desarrollo, como el análisis y el diseño.
Lower CASE: Herramientas que se utilizan en las fases posteriores del desarrollo, como la implementación y las pruebas.
Integrated CASE: Combinan funcionalidades tanto de las herramientas Upper CASE como de las Lower CASE para abarcar todo el ciclo de vida del software.

4. Alternativas:
Entorno de desarrollo integrado (IDE): Ejemplos como Visual Studio, que permite desarrollar software de manera eficiente.
Metodologías ágiles: Enfoques como Scrum que permiten un desarrollo iterativo y colaborativo.
DevOps: Prácticas que integran el desarrollo de software con la operación y el despliegue, utilizando herramientas como Docker.
APIs: Interfaces que permiten la integración de servicios de terceros, como REST o SOAP.
